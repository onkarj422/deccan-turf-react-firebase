/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppTurfsImport } from './routes/app/turfs'
import { Route as AppPaymentImport } from './routes/app/payment'
import { Route as AppDashboardImport } from './routes/app/dashboard'
import { Route as AppConfirmationImport } from './routes/app/confirmation'
import { Route as AppBookingsImport } from './routes/app/bookings'
import { Route as AppBookImport } from './routes/app/book'
import { Route as AppAppImport } from './routes/app/app'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => rootRoute,
} as any)

const AppTurfsRoute = AppTurfsImport.update({
  id: '/app/turfs',
  path: '/app/turfs',
  getParentRoute: () => rootRoute,
} as any)

const AppPaymentRoute = AppPaymentImport.update({
  id: '/app/payment',
  path: '/app/payment',
  getParentRoute: () => rootRoute,
} as any)

const AppDashboardRoute = AppDashboardImport.update({
  id: '/app/dashboard',
  path: '/app/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AppConfirmationRoute = AppConfirmationImport.update({
  id: '/app/confirmation',
  path: '/app/confirmation',
  getParentRoute: () => rootRoute,
} as any)

const AppBookingsRoute = AppBookingsImport.update({
  id: '/app/bookings',
  path: '/app/bookings',
  getParentRoute: () => rootRoute,
} as any)

const AppBookRoute = AppBookImport.update({
  id: '/app/book',
  path: '/app/book',
  getParentRoute: () => rootRoute,
} as any)

const AppAppRoute = AppAppImport.update({
  id: '/app/app',
  path: '/app/app',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/app/app': {
      id: '/app/app'
      path: '/app/app'
      fullPath: '/app/app'
      preLoaderRoute: typeof AppAppImport
      parentRoute: typeof rootRoute
    }
    '/app/book': {
      id: '/app/book'
      path: '/app/book'
      fullPath: '/app/book'
      preLoaderRoute: typeof AppBookImport
      parentRoute: typeof rootRoute
    }
    '/app/bookings': {
      id: '/app/bookings'
      path: '/app/bookings'
      fullPath: '/app/bookings'
      preLoaderRoute: typeof AppBookingsImport
      parentRoute: typeof rootRoute
    }
    '/app/confirmation': {
      id: '/app/confirmation'
      path: '/app/confirmation'
      fullPath: '/app/confirmation'
      preLoaderRoute: typeof AppConfirmationImport
      parentRoute: typeof rootRoute
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/app/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardImport
      parentRoute: typeof rootRoute
    }
    '/app/payment': {
      id: '/app/payment'
      path: '/app/payment'
      fullPath: '/app/payment'
      preLoaderRoute: typeof AppPaymentImport
      parentRoute: typeof rootRoute
    }
    '/app/turfs': {
      id: '/app/turfs'
      path: '/app/turfs'
      fullPath: '/app/turfs'
      preLoaderRoute: typeof AppTurfsImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/app/app': typeof AppAppRoute
  '/app/book': typeof AppBookRoute
  '/app/bookings': typeof AppBookingsRoute
  '/app/confirmation': typeof AppConfirmationRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/payment': typeof AppPaymentRoute
  '/app/turfs': typeof AppTurfsRoute
  '/app': typeof AppIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/app/app': typeof AppAppRoute
  '/app/book': typeof AppBookRoute
  '/app/bookings': typeof AppBookingsRoute
  '/app/confirmation': typeof AppConfirmationRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/payment': typeof AppPaymentRoute
  '/app/turfs': typeof AppTurfsRoute
  '/app': typeof AppIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/app/app': typeof AppAppRoute
  '/app/book': typeof AppBookRoute
  '/app/bookings': typeof AppBookingsRoute
  '/app/confirmation': typeof AppConfirmationRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/payment': typeof AppPaymentRoute
  '/app/turfs': typeof AppTurfsRoute
  '/app/': typeof AppIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/app/app'
    | '/app/book'
    | '/app/bookings'
    | '/app/confirmation'
    | '/app/dashboard'
    | '/app/payment'
    | '/app/turfs'
    | '/app'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/app/app'
    | '/app/book'
    | '/app/bookings'
    | '/app/confirmation'
    | '/app/dashboard'
    | '/app/payment'
    | '/app/turfs'
    | '/app'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/app/app'
    | '/app/book'
    | '/app/bookings'
    | '/app/confirmation'
    | '/app/dashboard'
    | '/app/payment'
    | '/app/turfs'
    | '/app/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  AppAppRoute: typeof AppAppRoute
  AppBookRoute: typeof AppBookRoute
  AppBookingsRoute: typeof AppBookingsRoute
  AppConfirmationRoute: typeof AppConfirmationRoute
  AppDashboardRoute: typeof AppDashboardRoute
  AppPaymentRoute: typeof AppPaymentRoute
  AppTurfsRoute: typeof AppTurfsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  AppAppRoute: AppAppRoute,
  AppBookRoute: AppBookRoute,
  AppBookingsRoute: AppBookingsRoute,
  AppConfirmationRoute: AppConfirmationRoute,
  AppDashboardRoute: AppDashboardRoute,
  AppPaymentRoute: AppPaymentRoute,
  AppTurfsRoute: AppTurfsRoute,
  AppIndexRoute: AppIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.ts",
      "children": [
        "/",
        "/login",
        "/app/app",
        "/app/book",
        "/app/bookings",
        "/app/confirmation",
        "/app/dashboard",
        "/app/payment",
        "/app/turfs",
        "/app/"
      ]
    },
    "/": {
      "filePath": "index.ts"
    },
    "/login": {
      "filePath": "login.ts"
    },
    "/app/app": {
      "filePath": "app/app.ts"
    },
    "/app/book": {
      "filePath": "app/book.ts"
    },
    "/app/bookings": {
      "filePath": "app/bookings.ts"
    },
    "/app/confirmation": {
      "filePath": "app/confirmation.ts"
    },
    "/app/dashboard": {
      "filePath": "app/dashboard.ts"
    },
    "/app/payment": {
      "filePath": "app/payment.ts"
    },
    "/app/turfs": {
      "filePath": "app/turfs.ts"
    },
    "/app/": {
      "filePath": "app/index.ts"
    }
  }
}
ROUTE_MANIFEST_END */
